@page "/create/event"
@inject EventStore EventStore
@inject FoodStore FoodStore
@inject RegionStore RegionStore
@inject CityStore CityStore
@inject AuthStore AuthStore
@inject EmployeeStore EmployeeStore
@inject HttpClient HttpClient
@inject IModalService Modal
@attribute [Authorize(Policy = Policies.IsAdmin)]

<h3>Create a new event</h3>

<EditForm Model="@EventStore.CreateEvent" OnValidSubmit="SubmitEvent">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Choose location</label>
        <LocationsForEvent />
    </div>
    <div class="form-group">
        <label for="name">Name</label>
        <InputText Id="name" class="form-control" @bind-Value="EventStore.CreateEvent.Name" />
        <ValidationMessage For="@(() => EventStore.CreateEvent.Name)" />
    </div>
    <div class="form-group">
        <label for="description">Description</label>
        <InputText Id="description" class="form-control" @bind-Value="EventStore.CreateEvent.Description" />
        <ValidationMessage For="@(() => EventStore.CreateEvent.Description)" />
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber Id="inputnumber" class="form-control" @bind-Value="EventStore.CreateEvent.Price" />
        <ValidationMessage For="@(() => EventStore.CreateEvent.Price)" />
    </div>
    <div class="form-group">
        <label for="date">Date</label>
        <InputDate Id="date" class="form-control" @bind-Value="EventStore.CreateEvent.EventDate" />
        <ValidationMessage For="@(() => EventStore.CreateEvent.EventDate)" />
    </div>
    <div class="form-group">
        <label>Last Booking Date</label>
        <InputDate class="form-control" @bind-Value="EventStore.CreateEvent.LastBookingDate" />
        <ValidationMessage For="@(() => EventStore.CreateEvent.LastBookingDate)" />
    </div>
    <div class="form-group">
        <label for="enddate">End of event</label>
        <InputDate Id="enddate" class="form-control" @bind-Value="EventStore.CreateEvent.EndEventDate" />
        <ValidationMessage For="@(() => EventStore.CreateEvent.EndEventDate)" />
    </div>
    <div class="form-group">
        <label for="mincustomer">Minimum customers</label>
        <InputNumber Id="mincustomer" class="form-control" @bind-Value="EventStore.CreateEvent.MinCustomerAmount" />
        <ValidationMessage For="@(() => EventStore.CreateEvent.MinCustomerAmount)" />
    </div>
    <div class="form-group">
        <label for="MaxCustomers">Maximum customers</label>
        <InputNumber Id="inputnumber" class="form-control" @bind-Value="EventStore.CreateEvent.MaxCustomerLimit" />
        <ValidationMessage For="@(() => EventStore.CreateEvent.MaxCustomerLimit)" />
    </div>
    <div class="form-group">
        <label>StreetName</label>
        <InputText class="form-control" @bind-Value="Address.RoadName" />
        <ValidationMessage For="@(() => Address.RoadName)" />
    </div>
    <div class="form-group">
        <label>Number</label>
        <InputNumber Id="inputnumber" class="form-control" @bind-Value="Address.RoadNumber" />
        <ValidationMessage For="@(() => Address.RoadNumber)" />
    </div>
    <div class="form-group">
        <label for="x">Længdegrad</label>
        <InputNumber Id="x" class="form-control" @bind-Value="@Marker.X" />
    </div> 
    <div class="form-group">
        <label for="Y">Breddegrad</label>
        <InputNumber Id="Y" class="form-control" @bind-Value="@Marker.Y" />
    </div>
    <div class="form-group">
        <label for="payable">Payable</label>
        <InputCheckbox Id="payable" class="form-control" @bind-Value="EventStore.CreateEvent.PayOnline" />
    </div>
    <h3>Food</h3>
    <button type="button" @onclick="@HideForm">Add</button>
    <div class="@hideForm">
        <div class="form-group">
            <label for="food">Food Name</label>
            <InputText Id="food" class="form-control" @bind-Value="CreateFood.Name" />
            <ValidationMessage For="@(() =>CreateFood.Name)" />
        </div>
        <div class="form-group">
            <label for="inputnumber">Food Price</label>
            <InputNumber Id="inputnumber" class="form-control" @bind-Value="CreateFood.Price" />
            <ValidationMessage For="@(() =>CreateFood.Price)" />
        </div>
    </div>
    <br />
    <button class="btn btn-outline-success">Submit</button>
</EditForm>

@code { 

    private CreateAddressForEventViewModel Address { get; set; } = new CreateAddressForEventViewModel();
    private CreateFoodViewModel CreateFood = new CreateFoodViewModel();
    private CreateMarkerViewModel Marker = new CreateMarkerViewModel();
    public string hideForm = "hide-form";
    private bool hidden = false;

    private async Task SubmitEvent()
    {
        var events = await HttpClient.GetJsonAsync<IEnumerable<GetEventListViewModel>>("api/events/active");
        PackageEvent();
        foreach (var _event in events)
        {
            if (_event.EventDate == EventStore.CreateEvent.EventDate && _event.City.Name == EventStore.CreateEvent.City.Name)
            {
                EventStore.ShowWarning = true;
            }
        }
        Modal.Show<ConfirmEventCreation>("Confirm Event?");
    }

    private void PackageEvent()
    {
        RegionStore.Region.Cities = null;    //To avoid sending unnecessary cities when posting 
        EventStore.CreateEvent.Image = new byte[] { 0x00 };
        EventStore.CreateEvent.City = CityStore.City;
        EventStore.CreateEvent.Address = Address;
        EventStore.CreateEvent.Region = RegionStore.Region;
        EventStore.CreateEvent.Marker = Marker;
        if (CreateFood.Name == "" && CreateFood.Price == 0)
        {
            EventStore.CreateEvent.Food = null;
        }
        else
        {
            EventStore.CreateEvent.Food = CreateFood;
        }
    }

    private void HideForm()
    {
        if (hidden == true)
        {
            hideForm = "hide-form";
        }
        if(hidden == false)
        {
            hideForm = "display-form";
        }

        hidden = !hidden;
    }
}
