@page "/{eventId:guid}/event/details"
@inject HttpClient HttpClient
@inject EventStore EventStore
@inject AuthStore AuthStore

<h3>Event</h3>

<p>@EventStore.Event.Name</p>

<button class="btn btn-success" disabled="@disabled" @onclick="@(() => BookEventForUser(EventStore.Event))">Book event</button>

<UsersFromEvent EventId="@EventId" />

@code {

    [Parameter]
    public Guid EventId { get; set; }
    private bool disabled { get; set; }

    protected override async Task OnInitializedAsync()
    {
        EventStore.Event = await HttpClient.GetJsonAsync<GetSingleEventViewModel>($"api/events/{EventId}");
        IsPayableOnline();
        AuthStore.User = await HttpClient.GetJsonAsync<UserModel>("api/accounts/user");
    }

    private async Task BookEventForUser(GetSingleEventViewModel _event)
    {
        var user = new AddUserToEventViewModel()
        {
            Id = AuthStore.User.Id,
            City = AuthStore.User.City,
            Email = AuthStore.User.Email,
            FirstName = AuthStore.User.FirstName,
            LastName = AuthStore.User.LastName,
            Event = EventStore.Event,
        };

        await HttpClient.PostJsonAsync<AddUserToEventViewModel>($"api/user/{EventId}/book/event", user);
    }

    private void IsPayableOnline()
    {
        if (EventStore.Event.PayOnline == false)
        {
            disabled = true;
        }
        else
        {
            disabled = false;
        }
    }
}
