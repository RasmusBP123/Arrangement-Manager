@page "/{eventId:guid}/event/details"
@inject HttpClient HttpClient
@inject EventStore EventStore
@inject AuthStore AuthStore

<h3>Event</h3>

@if(EventStore.Event == null || EventStore.Event.City == null)
{
    <text>Loading..</text>
}
else
{
    <p>@EventStore.Event.Name</p>
    <p>@EventStore.Event.City.Name</p>

    <button class="btn btn-success" disabled="@disabled" @onclick="@(() => BookEventForUser())">Book event</button>
    <UsersFromEvent EventId="@EventId" />
}

@code {

    [Parameter]
    public Guid EventId { get; set; }
    private bool disabled { get; set; }

    protected override async Task OnInitializedAsync()
    {
        EventStore.Event = await HttpClient.GetJsonAsync<GetSingleEventViewModel>($"api/events/{EventId}");
        IsPayableOnline();
        //AuthStore.User = await HttpClient.GetJsonAsync<UserModel>("api/accounts/user");
        EventStore.OnBookEvent += StateHasChanged;
    }

    private async Task BookEventForUser()
    {
        var userEvent = new AddUserToEventViewModel()
        {
            UserId = AuthStore.User.Id,
            EventId = EventId
        };

        await HttpClient.PostJsonAsync<AddUserToEventViewModel>($"api/user/{EventId}/book/event", userEvent);
        EventStore.NotifyBookedEvent();
    }

    private void IsPayableOnline()
    {
        if (EventStore.Event.PayOnline == false)
        {
            disabled = true;
        }
        else
        {
            disabled = false;
        }
    }
}
