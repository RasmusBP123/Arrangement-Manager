@page "/{eventId:guid}/event/details"
@inject HttpClient HttpClient
@inject EventStore EventStore
@inject AuthStore AuthStore
@inject UserStore UserStore
<h3>Event</h3>

@if (EventStore.Event == null || EventStore.Event.City == null)
{
    <text>Loading..</text>
}
else
{
    <p>@EventStore.Event.Name</p>
    <p>@EventStore.Event.City.Name</p>
    <p>@EventStore.Event.CurrentAmountOfCustomers</p>
    <p>@EventStore.Event.MaxCustomerLimit</p>

    <p>How many tickets would you like to buy?</p>
    <p class="@EventIsFull warning">You are about to overbook this event, which you cannot do</p>

    <input @bind-value="@ticketAmount" />
    <button type="submit" class="btn btn-success" disabled="@disabled" @onclick="@(() => BookEventForUser())">Book event</button>
}

@code {

    [Parameter]
    public Guid EventId { get; set; }
    private bool disabled { get; set; }
    private int ticketAmount = 0;
    private string EventIsFull = "hide";

    protected override async Task OnInitializedAsync()
    {
        EventIsFull = "hide";
        EventStore.Event = await HttpClient.GetJsonAsync<GetSingleEventViewModel>($"api/events/{EventId}");
        UserStore.UsersFromEvent = await HttpClient.GetJsonAsync<IEnumerable<GetUserFromEventViewModel>>($"api/user/{EventId}/users");
        CanBookOnline();
        UserAlreadyBookedEvent();
        EventIsFullyBooked();
    }

    private async Task BookEventForUser()
    {
        var userEvent = new AddUserToEventViewModel()
        {
            UserId = AuthStore.User.Id,
            EventId = EventId,
            TicketAmount = ticketAmount
        };

        if (EventStore.Event.CurrentAmountOfCustomers + ticketAmount > EventStore.Event.MaxCustomerLimit)
        {
            EventIsFull = "display";
        }
        else
        {
            await HttpClient.PostJsonAsync<AddUserToEventViewModel>($"api/user/{EventId}/book/event", userEvent);
        }
    }

    private void EventIsFullyBooked()
    {
        if (EventStore.Event.CurrentAmountOfCustomers >= EventStore.Event.MaxCustomerLimit)
        {
            disabled = true;
        }
    }

    private void CanBookOnline()
    {
        if (EventStore.Event.PayOnline == false)
        {
            disabled = true;
        }
        else
        {
            disabled = false;
        }
    }

    private void UserAlreadyBookedEvent()
    {
        foreach (var user in UserStore.UsersFromEvent)
        {
            if (AuthStore.User.Id == user.Id)
            {
                disabled = true;
                return;
            }
        }
    }
}
