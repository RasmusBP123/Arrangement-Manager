@page "/events"
@inherits FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<GetActiveEventsState> EventState
@inject EventStore EventStore
@inject HttpClient HttpClient
@implements IDisposable

<input class="search-bar pointer" type="search" @bind-Value="EventStore.SearchTerm" @bind-Value:event="oninput" placeholder=" ..." />

<ul class="eventlist-container">
    @foreach (var _event in EventStore.EventSearch(EventStore.Events))
    { 
        <Event Model="@_event" />
    }
</ul>

@code {

    protected override async Task OnInitializedAsync()
    {
        EventStore.Events = await HttpClient.GetJsonAsync<List<GetEventListViewModel>>("api/events/active");
        EventStore.OnClickedRegion += StateHasChanged;
        //EventStore.OnBookedEvent += StateHasChanged;
        //Dispatcher.Dispatch(new GetActiveEventsAction());
    }

    void IDisposable.Dispose()
    {
        EventStore.OnClickedRegion -= StateHasChanged;
    }
}
