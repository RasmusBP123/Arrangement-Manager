@inject HttpClient HttpClient
@inject RegionStore RegionStore
@inject EventStore  EventStore
@inject CityStore CityStore

<div class="side-flex">
    <div>
        <select class="form-control" @onchange="@RegionClicked">
            <option>-- Vælg Region --</option>
            @foreach (var region in RegionStore.Regions)
            {
                <option value="@region.Id">@region.Name</option>
            }
        </select>
    </div>
    <div>
        <select class="form-control" @onchange="CityClicked">
            <option>-- Vælg by --</option>
            @if (RegionStore.RegionToBeAdded != null && RegionStore.Region.Cities != null)
            {
                @foreach (var city in RegionStore.Region.Cities)
                {
                    <option value="@city.Id">@city.Name</option>
                }
            }
        </select>
    </div>
</div>

@code {

        string regionId = "";

    protected override async Task OnInitializedAsync()
    {
        RegionStore.Regions = await HttpClient.GetJsonAsync<IEnumerable<GetRegionViewModel>>("api/regions");
    }

    public async Task RegionClicked(ChangeEventArgs changeEvent)
    {
        if(Guid.TryParse(changeEvent.Value.ToString(), out var newGuid) == true)
        {
            regionId = changeEvent.Value.ToString();
            RegionStore.Region = await HttpClient.GetJsonAsync<GetRegionViewModel>($"api/regions/{regionId}");
            EventStore.NotifyEventStateChanged();
        }
    }

    public async Task CityClicked(ChangeEventArgs changeEvent)
    {
        if (Guid.TryParse(changeEvent.Value.ToString(), out var newGuid) == true)
        {
            var cityId = changeEvent.Value.ToString();
            CityStore.City = await HttpClient.GetJsonAsync<GetCityViewModel>($"api/city/{cityId}");
            EventStore.NotifyEventStateChanged();
        }
    }
}
