@inject HttpClient HttpClient
@inject RegionStore RegionStore
@inject EventStore  EventStore
@inject CityStore CityStore
@inject ThemeStore Theme

<div class="side-flex">
        <div>
            <select class="form-control pointer" @onchange="@RegionClicked">
                <option value="">-- Vælg Region --</option>
                @foreach (var region in RegionStore.Regions)
                 {
                    <option value="@region.Id">@region.Name</option>
                 }
            </select>
        </div>
        <div>
            <select class="form-control pointer" @onchange="CityClicked">
                <option value="">-- Vælg by --</option>
                @if (RegionStore.Region != null && RegionStore.Region.Cities != null)
                {
                    @foreach (var city in RegionStore.Region.Cities)
                    {
                        <option value="@city.Id">@city.Name</option>
                    }
                }
            </select>
        </div>
    </div>

@code {

    string regionId = "";
    string cityId = "";
    private GetRegionViewModel region;
    protected override async Task OnInitializedAsync()
    {
        region = new GetRegionViewModel();
        RegionStore.Regions = await HttpClient.GetJsonAsync<IEnumerable<GetRegionViewModel>>("api/regions");
    }

    public async Task RegionClicked(ChangeEventArgs changeEvent)
    {
        //Ensures if a city has already been selected, and a new region is selected, a city wont be chosen
        if (!string.IsNullOrEmpty(cityId))
        {
            RegionStore.Region.Cities = new List<GetCityViewModel>();
        }

        if (Guid.TryParse(changeEvent.Value.ToString(), out var newGuid) == true)
        {
            regionId = changeEvent.Value.ToString();
            RegionStore.Region = await HttpClient.GetJsonAsync<GetRegionViewModel>($"api/regions/{regionId}");
            EventStore.Events = await HttpClient.GetJsonAsync<List<GetEventListViewModel>>($"api/events/region/{regionId}");
            EventStore.NotifyStateChanged();
        }
        else
        {
            RegionStore.Region.Cities = new List<GetCityViewModel>();
            EventStore.Events = await HttpClient.GetJsonAsync<List<GetEventListViewModel>>($"api/events/active");
            EventStore.NotifyStateChanged();
        }
    }

    public async Task CityClicked(ChangeEventArgs changeEvent)
    {
        if (Guid.TryParse(changeEvent.Value.ToString(), out var newGuid) == true)
        {
            cityId = changeEvent.Value.ToString();
            EventStore.Events = await HttpClient.GetJsonAsync<List<GetEventListViewModel>>($"api/events/region/{regionId}/city/{cityId}");
            EventStore.NotifyStateChanged();
        }
    }
}
