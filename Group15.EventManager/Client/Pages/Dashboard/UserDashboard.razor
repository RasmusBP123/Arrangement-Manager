@page "/events/{eventId:guid}/users"
@inject HttpClient HttpClient
@inject NavigationManager NavManager
@inject UserStore UserStore
@inject AttendanceStore AttendanceStore
@inject IModalService ModalService
@attribute [Authorize(Roles = "Employee, Admin")]


@if (Event.Attendance.Finished == true)
{
    <EventInfo Event="@Event" />
}
else
{
    <div>
        <div class="flex-row justify-content-between">
            <h3>@Event.Name</h3>
            <button class="btn btn-success padding" @onclick="ShowConfirmAttendance">Bekræft</button>
        </div>

        <UserContainer OnMovedUser="RerenderUsers" SignedUpUsers="UserStore.UsersFromEvent" EventContainer="Event">
            <UserList UserStatus="@UserStatus.Inviteret" />
            <UserList UserStatus="@UserStatus.Registeret" />
            <UserList UserStatus="@UserStatus.Udeblevet" />
        </UserContainer>
    </div>
}

@code {
    [Parameter]
    public Guid EventId { get; set; }

    private GetSingleEventViewModel Event { get; set; } = new GetSingleEventViewModel();

    protected override async Task OnInitializedAsync()
    {
        UserStore.UsersFromEvent = new List<GetUserFromEventViewModel>();
        Event.Attendance = new GetAttendanceViewModel();
        Event = await HttpClient.GetJsonAsync<GetSingleEventViewModel>($"api/events/{EventId}");
        await GetUsersDependingOnEarlierViset(UserStore.UsersFromEvent.Count());
    }

    private void RerenderUsers()
    {
        this.StateHasChanged();
    }

    private async Task GetUsersDependingOnEarlierViset(int numberOfUsers)
    {
        if (numberOfUsers != 0) //This check guarantees that if user moves users, and leaves the page, it will not reset the page. You will need to reload the page to do that
        {
            foreach (var user in UserStore.UsersFromEvent)
            {
                UserStatus status = user.Status;
                switch (status)
                {
                    case UserStatus.Inviteret:
                        user.Status = UserStatus.Inviteret;
                        break;
                    case UserStatus.Registeret:
                        user.Status = UserStatus.Registeret;
                        break;
                    case UserStatus.Udeblevet:
                        user.Status = UserStatus.Udeblevet;
                        break;
                    default:
                        break;
                }
            }
        }
        else
        {
            UserStore.UsersFromEvent = await HttpClient.GetJsonAsync<IEnumerable<GetUserFromEventViewModel>>($"api/user/{EventId}/users");
        }
    }

    private void ShowConfirmAttendance()
    {
        var parameter = new ModalParameters();
        parameter.Add("Event", Event);
        ModalService.Show<ConfirmAttendance>("Confirm attendance", parameter);
    }
}
