@page "/events/{eventId:guid}/users"
@inject HttpClient HttpClient
@inject UserStore UserStore
@inject AttendanceStore AttendanceStore
@inject IModalService ModalService

<h3>@Event.Name</h3>
<p>@Event.Price</p>

<div class="@disabled">
    <button class="btn btn-success" @onclick="ShowConfirmAttendance">Confirm</button>
    <UserContainer OnMovedUser="RerenderUsers" SignedUpUsers="UserStore.UsersFromEvent">
        <UserList UserStatus="@UserStatus.Invited" />
        <UserList UserStatus="@UserStatus.Registered" />
        <UserList UserStatus="@UserStatus.Cancelled" />
    </UserContainer>
</div>

@code {
    [Parameter]
    public Guid EventId { get; set; }
    private string disabled = "";

    private GetSingleEventViewModel Event { get; set; } = new GetSingleEventViewModel();

    protected override async Task OnParametersSetAsync()
    {
        Event = await HttpClient.GetJsonAsync<GetSingleEventViewModel>($"api/events/{EventId}");
        if (Event.Attendance != null)
        {
            DisableDashboardContent(Event.Attendance.Finished);
        }

        if (UserStore.UsersFromEvent.Count() == 0) //This check guarantees that if user moves users, and leaves the page, it will not reset the page. You will need to reload the page to do that
        {
            UserStore.UsersFromEvent = await HttpClient.GetJsonAsync<IEnumerable<GetUserFromEventViewModel>>($"api/user/{EventId}/users");
            foreach (var user in UserStore.UsersFromEvent)
            {
                user.Status = UserStatus.Invited;
            }
        }
    }

    private void RerenderUsers()
    {
        this.StateHasChanged();
    }

    private void ShowConfirmAttendance()
    {
        var parameter = new ModalParameters();
        parameter.Add("Event", Event);
        ModalService.Show("Confirm attendance", typeof(ConfirmAttendance), parameter);
    }

    private void DisableDashboardContent(bool finished = false)
    {
        if (finished == true) disabled = "disabled";
    }
}
