@page  "/login"
@inject IAuthService AuthService
@inject NavigationManager NavManager
@inject AuthStore AuthStore
@inject HttpClient HttpClient

<AuthorizeView>
    <Authorizing>
        <text>Processing..</text>
    </Authorizing>
    <NotAuthorized>

        <h3>Login</h3>

        @if (ShowErrors)
        {
            <div class="alert alert-danger" role="alert">
                <p>@Error</p>
            </div>
        }

        <EditForm Model="loginModel" OnValidSubmit="@HandleLogin" Context="loginContext">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="email">Email address</label>
                <InputText Id="email" class="form-control" @bind-Value="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>

    </NotAuthorized>
</AuthorizeView>

@code {

    private LoginModel loginModel = new LoginModel();
    private bool ShowErrors;
    private string Error;

    protected override async Task OnParametersSetAsync()
    {
        //Redirects user if already authenticated
        var result = await HttpClient.GetJsonAsync<bool>("api/accounts/valid");

        if (result == true)
        {
            NavManager.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        ShowErrors = false;
        LoginResult result = new LoginResult();
        try
        {
            result = await AuthService.Login(loginModel);
            if (result.Successful)
            {
                NavManager.NavigateTo("/");
            }
            else
            {
                 ShowErrors = true;
                Error = result.Error;
                Console.WriteLine(Error);
            }
        }
        catch (Exception e)
        {
            ShowErrors = true;
            Error = result.Error;
            Console.WriteLine(Error);
        }
    }
}
