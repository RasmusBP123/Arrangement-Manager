@page "/register"
@inject IAuthService AuthService
@inject AuthStore AuthStore
@inject NavigationManager NavManager
@inject HttpClient HttpClient

<AuthorizeView>
    <Authorizing>
        <text>Processing..</text>
    </Authorizing>
    <NotAuthorized>
        <h3>Register</h3>

        @if (ShowErrors)
        {
            <div class="alert alert-danger" role="alert">
                @foreach (var error in Errors)
                {
                    <p>@error</p>
                }
            </div>
        }

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Please enter your details</h5>
                <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration" Context="registerContext">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label for="email">Email address</label>
                        <InputText Id="email" class="form-control" @bind-Value="registerModel.Email" />
                        <ValidationMessage For="@(() => registerModel.Email)" />
                    </div>
                    <div class="form-group">
                        <label for="password">Password</label>
                        <InputText Id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
                        <ValidationMessage For="@(() => registerModel.Password)" />
                    </div>
                    <div class="form-group">
                        <label for="password">Confirm Password</label>
                        <InputText Id="password" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" />
                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                    </div>
                    <div class="form-group">
                        <label for="firstName">First Name</label>
                        <InputText Id="firstName" class="form-control" @bind-Value="registerModel.FirstName" />
                        <ValidationMessage For="@(() => registerModel.FirstName)" />
                    </div>
                    <div class="form-group">
                        <label for="lastName">Last Name</label>
                        <InputText Id="lasttName" class="form-control" @bind-Value="registerModel.LastName" />
                        <ValidationMessage For="@(() => registerModel.LastName)" />
                    </div>
                    <div class="form-group">
                        <label for="phoneNumber">Phone Number</label>
                        <InputText Id="phoneNumber" class="form-control" @bind-Value="registerModel.PhoneNumber" />
                        <ValidationMessage For="@(() => registerModel.PhoneNumber)" />
                    </div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </EditForm>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {

    private RegisterModel registerModel = new RegisterModel();
    private bool ShowErrors;
    private IEnumerable<string> Errors;

    protected override async Task OnInitializedAsync()
    {
        //Redirects user if already authenticated 
        var result = await HttpClient.GetJsonAsync<bool>("api/accounts/valid");

        if (result == true)
        {
            NavManager.NavigateTo("/");
        }
    }

    private async Task HandleRegistration()
    {
        ShowErrors = false;
        try
        {
            var result = await AuthService.Register(registerModel);
            if (result.Successful)
            {
                NavManager.NavigateTo("/login");
            }
            else
            {
                Errors = result.Errors;
                ShowErrors = true;
            }
        }
        catch(Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
}
