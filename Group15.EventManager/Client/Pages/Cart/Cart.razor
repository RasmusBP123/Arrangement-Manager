@page "/cart"
@inject AuthStore AuthStore
@inject TicketStore TicketStore
@inject EventStore EventStore
@inject HttpClient HttpClient
@inject NavigationManager NavManager
@inject ThemeStore ThemeStore

<h3>Cart</h3>


<Process Step="Step.Kurv" />
<div class="wrapper">
    <div>
        <div class="padding">
            <MatThemeProvider Theme="ThemeStore.Main">
                <MatButton Raised="true" OnClick="@(() => NavManager.NavigateTo("delivery"))">Næste</MatButton>
            </MatThemeProvider>
        </div>

        @foreach (var _event in EventStore.EventsWithTickets)
        {
            <h5>Billet: @_event.Name</h5>
            <div class="background-grey">
                <div class="amount-container">
                    <CascadingValue Value="_event.MaxCustomerLimit">
                        <Amount CurrentAmount="@_event.CurrentAmountOfCustomers" />
                    </CascadingValue>
                </div>
                <button class="btn btn-danger reverse-padding" @onclick="@(() => CancelEvent(_event.Id))">x</button>
            </div>
        }
    </div>

    <div class="side-container">
        <div class="aside-box">
            <label class="grey">Ordre resume</label>
            <UserEvents />
        </div>
        <div class="aside-box">
            <label class="grey">Beløb</label>
            <CalculatedTotalAmount />
        </div>
    </div>
</div>

@code {

    [CascadingParameter]
    public int MaxCustomerLimit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthStore.User = await HttpClient.GetJsonAsync<UserModel>("api/accounts/user");
        EventStore.EventsWithTickets = await HttpClient.GetJsonAsync<IEnumerable<GetEventWithTicketsViewModel>>($"api/events/user/{AuthStore.User.Id}/tickets");
    }

    private async Task UpdateTicketAmount(IEnumerable<GetEventWithTicketsViewModel> tickets)
    {
        var events = new List<UpdateEventWithTicketsViewModel>();
        foreach (var e in tickets)
        {
            events.Add(new UpdateEventWithTicketsViewModel { Id = e.Id, CurrentAmountOfCustomers = e.CurrentAmountOfCustomers });
        }

        var updatedTickets = new UpdateTicketsViewModel()
        {
            User = AuthStore.User,
            Events = EventStore.EventsWithTickets
        };

        await HttpClient.PostJsonAsync<UpdateTicketsViewModel>("api/tickets/update", updatedTickets);
    }

    private async Task CancelEvent(Guid eventId)
    {
        try
        {
            await HttpClient.DeleteAsync($"api/user/{AuthStore.User.Id}/delete/{eventId}/event");
            EventStore.EventsWithTickets = await HttpClient.GetJsonAsync<IEnumerable<GetEventWithTicketsViewModel>>($"api/events/user/{AuthStore.User.Id}/tickets");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
}
