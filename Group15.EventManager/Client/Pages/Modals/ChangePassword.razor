@inject AuthStore AuthStore
@inject IModalService ModalService
@inject HttpClient HttpClient

    <EditForm Model="@AccountModel" OnValidSubmit="(() => SubmitNewPassword())">
        <div class="form-group">
            <label>Indtast eksisterende kodeord</label>
            <input class="form-control" type="password" @bind-value="@AccountModel.CurrentPassword" />
        </div>
        <div class="form-group">
            <label>Indtast nyt kodeord</label>
            <input class="form-control" type="password" @bind-value="@AccountModel.NewPassword" />
        </div>   
        <MatButton Raised="true" Type="submit">Bekræft</MatButton>
    </EditForm>

@if (PasswordError == true)
{
    <p>Der opstod en fejl. Check venligst at dit kodeord har været langt nok eller med et stort bogstav</p>
}

@code { 
    public bool PasswordError { get; set; }
    public UpdateAccountPasswordModel AccountModel { get; set; } = new UpdateAccountPasswordModel();

    protected override async Task OnInitializedAsync()
    {
        AuthStore.User = await HttpClient.GetJsonAsync<UserModel>("api/accounts/user");
        AccountModel.Id = AuthStore.User.Id;
    }

    private async Task SubmitNewPassword()
    {
        var result = await HttpClient.PostJsonAsync<bool>("api/accounts/update/password", AccountModel);
        if (result)
        {
            ModalService.Show<ConfirmPasswordChange>("Bekræftet");
        }
        else
        {
            PasswordError = true;
        }
    }
}
